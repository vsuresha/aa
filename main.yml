name: 'AppSec Aqua'

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  APP_NAME: "PSS-GTPT-TEST_AP"
  IMAGE_NAME_TAG: "docker-rt-symphony-platform.pruregistry.intranet.asia/pru-docker-jdk:iptable-amd"

jobs:
  Aqua-Scan:
    runs-on: pru-gisp-all-nprd-linux-runner-01
    container:
      image: docker-rt-symphony-platform.pruregistry.intranet.asia/pru-docker-jdk:iptable-amd  #docker-rt-symphony-platform.registry.pruconnect.net/devopsgtpt/devsecops/polaris:2024.3.0
      credentials:
        username: ${{ secrets.USERNAME_PRUREGISTRY }}
        password: ${{ secrets.PASSWORD_PRUREGISTRY }}
    permissions:
      contents: read

    steps:
    # - name: Checkout repository
    #   uses: actions/checkout@v4

    # - name: Setting PATH for the ScannerCLI
    #   run: |
    #     mkdir bin
    #     curl -L  https://prudential.polaris.synopsys.com/api/tools/polaris_cli-linux64.zip -o polaris_cli-linux64.zip && \
    #       unzip -j -o polaris_cli-linux64.zip -d bin && \
    #       rm -rf polaris_cli-linux64.zip
    #     # curl -L -u ${{ secrets.USERNAME_PRUREGISTRY }}:${{ secrets.PASSWORD_PRUREGISTRY }} "https://artifactory-new.pru.intranet.asia:8443/artifactory/generic-rits-devsecops-sast-local/Polaris/CLI/polaris.zip" -o polaris.zip &&         unzip -j -o polaris.zip -d bin &&         rm -rf polaris.zip
    
    #     chmod -R u+x bin
    #     ls -l bin
    # - run: echo "bin" >> $GITHUB_PATH
    # - run: polaris
    # - run: sleep 500
    - name: Trigger AquaSec Scan
      uses: pru-gisp/csec/actions/aquasec-scan@feature/test
      with:
        AQUASEC_APP_NAME: "PSS-GTPT-TEST_AP"
        IMAGE_NAME_TAG: "docker-rt-symphony-platform.pruregistry.intranet.asia/pru-docker-jdk:iptable-amd" 
        AQUASEC_USER_EMAIL: ${{ secrets.AQUASEC_USER_EMAIL }}
        AQUASEC_USER_PASSWORD: ${{ secrets.AQUASEC_USER_PASSWORD }}
        AQUASEC_SAAS_TOKEN: ${{ secrets.AQUASEC_SAAS_TOKEN }}
        USERNAME_PRUREGISTRY: ${{ secrets.USERNAME_PRUREGISTRY }}
        PASSWORD_PRUREGISTRY: ${{ secrets.PASSWORD_PRUREGISTRY }}

        
        # - name: Setting PATH for the ScannerCLI
    #   run: |
    #     curl -u ${{ secrets.USERNAME_PRUREGISTRY }}:${{ secrets.PASSWORD_PRUREGISTRY }} -O "https://artifactory-new.pru.intranet.asia:8443/artifactory/generic-rits-devsecops-oss-local/Aquasec/scannercli"
    #     chmod +x scannercli
    #     mkdir bin
    #     curl -u ${{ secrets.USERNAME_PRUREGISTRY }}:${{ secrets.PASSWORD_PRUREGISTRY }} -O "https://artifactory-new.pru.intranet.asia:8443/artifactory/generic-rits-devsecops-oss-local/jq"
    #     chmod +x jq
    #     mv jq bin
    #     mv scannercli bin
    #     ls -l bin
    # - run: echo "bin" >> $GITHUB_PATH
    # - name: Exctracting Registry Name from the Provided Image
    #   id: registry_name
    #   run: |
    #     echo REGISTRY_NAME=$(echo ${{ env.IMAGE_NAME_TAG }} | cut -d'.' -f1) >> "$GITHUB_OUTPUT"
    # - name: Authentication and App Verification
    #   run: |        
    #     echo AQUASEC_API_TOKEN=$(curl -s POST -H 'Content-Type: application/json' -d '{"email":"'${{ secrets.AQUASEC_USER_EMAIL }}'", "password":"'${{ secrets.AQUASEC_USER_PASSWORD }}'"}' "${{ vars.AQUA_API_URL }}/v2/signin" | jq -r ".data.token") >> "$GITHUB_ENV"
    #     echo "AquaSec API Token has been generated successfully"
    # - name: Verify Application Exist
    #   id: app_label
    #   run: |
    #     echo  APP_LABEL_NAME=$(curl -s GET -H "Content-Type: application/json" -H "Authorization: Bearer ${AQUASEC_API_TOKEN}" ${{ vars.AQUA_DASHBOARD_URL }}/api/v1/settings/labels/${{ env.APP_NAME }} | jq -r '.name') >> "$GITHUB_OUTPUT"
    # - name: Execute AquaSec Scan
    #   run: |
    #         if [ ${{ steps.app_label.outputs.APP_LABEL_NAME == env.APP_NAME }} ]; then
    #           echo App Label Name- '${{ steps.app_label.outputs.APP_LABEL_NAME }}' in AquaSec matches with the provided App Name- '${{ env.APP_NAME }}'
    #           echo "Scanning the Image: ${{ env.IMAGE_NAME_TAG }} for AquaSec"
    #           scannercli scan                             \
    #             -H ${{ vars.AQUA_DASHBOARD_URL }}        \
    #             -A ${{ secrets.AQUASEC_SAAS_TOKEN }}        \
    #             --no-verify --dockerless --checkonly --collect-sensitive --scan-malware   \
    #             --registry ${{ steps.registry_name.outputs.REGISTRY_NAME }}          \
    #             --register                                   \
    #             --local ${{ env.IMAGE_NAME_TAG }} > aquasec_scan_results.json
    #           echo "AquaSec Scanning has been completed for the Image: ${{ env.IMAGE_NAME_TAG }}"
    #           cat aquasec_scan_results.json

    #         else
    #           {
    #             echo :x: Scanning **COULD NOT** be completed as App Label Name- "${{ steps.app_label.outputs.APP_LABEL_NAME }}" in AquaSec **DOES NOT** matches with the provided App Name- "${{ env.APP_NAME }}"
    #             echo Incorrect Application name provided in scan snippet or Applicaiton not onboarded to Aqua console
    #           }  >> "$GITHUB_STEP_SUMMARY"
    #           exit 1
    #         fi

    # - name: Mapping Image to Application Label=${{ env.APP_NAME }}
    #   run: |
    #         echo Looking for the provided Label in the AquSec- ${{ env.APP_NAME }}
    #         curl -s -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${AQUASEC_API_TOKEN}" -d '{"id": ["${{ steps.registry_name.outputs.REGISTRY_NAME }}","${{ env.IMAGE_NAME_TAG }}"],"type": "image"}' ${{ vars.AQUA_DASHBOARD_URL }}/api/v1/settings/labels/${{ env.APP_NAME }}/attach

    # - name: Print Summary
    #   run: |
    #         {
    #           echo :white_check_mark: Scanning has been completed for the Image- **"${{ env.IMAGE_NAME_TAG }}"**
    #           echo '**For further details on AquaSec Scan details Login to "[AquaSec SAAS Portal](${{ vars.AQUA_DASHBOARD_URL}})"**'
    #         } >> "$GITHUB_STEP_SUMMARY"

    # - uses: actions/upload-artifact@v4
    #   with:
    #     name: AquaSec_Scan_Result
    #     path: aquasec_scan_results.json
